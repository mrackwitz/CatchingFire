//
//  ExampleTests.swift
//  CatchingFire
//
//  Created by Marius Rackwitz on 9.7.15.
//  Copyright Â© 2015 Marius Rackwitz. All rights reserved.
//

import XCTest
import CatchingFire


enum BombError: ErrorProtocol {
    case WrongWire
    case TimeElapsed
}
let ğŸ”¥ = BombError.TimeElapsed

let ğŸ•š = 11
let ğŸ•› = 12

class Trigger {
    var alarmTime: Int
    private var enabled: Bool = true
    
    init(alarmTime: Int) {
        self.alarmTime = alarmTime
    }
    
    func cutRedWire() throws {
        throw BombError.WrongWire
    }
    
    func cutBlueWire() throws {
        self.enabled = false
    }
    
    func enable() {
        self.enabled = true
    }
}

func ğŸ’£(time: Int) throws -> Trigger {
    struct Internals {
        static var trigger = Trigger(alarmTime: ğŸ•›)
    }
    let trigger = Internals.trigger
    if trigger.enabled && time >= trigger.alarmTime {
        throw ğŸ”¥
    }
    return trigger
}


class ExampleTests : XCTestCase {

    override func setUp() {
        let trigger = try! ğŸ’£(ğŸ•š)
        trigger.enable()
    }
    
    func testDisarm() {
        AssertNoThrow {
            let trigger = try ğŸ’£(ğŸ•š)
            try trigger.cutBlueWire()
        }
        AssertNoThrow(try ğŸ’£(ğŸ•›))
    }

    func testDoNotDisarm() {
        AssertNoThrow(try ğŸ’£(ğŸ•š))
        AssertThrows(ğŸ”¥, try ğŸ’£(ğŸ•›))
    }

    func testFailToDisarm() {
        AssertThrows(BombError.WrongWire) {
            let trigger = try ğŸ’£(ğŸ•š)
            try trigger.cutRedWire()
        }
    }
    
    func testIsArmedInitially() {
        XCTAssertTrue(AssertNoThrow(try ğŸ’£(ğŸ•š))?.enabled == true)
    }
    
}
